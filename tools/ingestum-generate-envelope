#!/usr/bin/python3
#
# Copyright (c) 2023 Sorcero, Inc.
#
# This file is part of Sorcero's Language Intelligence platform
# (see https://www.sorcero.com).
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#

import os
import json
import argparse

from pydantic import BaseModel
from typing import Optional, List

from ingestum import manifests
from ingestum import pipelines


class Envelope(BaseModel):
    manifest: manifests.Base
    pipelines: Optional[List[pipelines.Base]]


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("manifest", type=str)
    parser.add_argument("--pipelines", type=str, default=None)
    args = parser.parse_args()

    _manifest = manifests.Base.parse_file(args.manifest)
    _pipelines = []
    _pipelines_added = []

    if args.pipelines is not None:
        for source in _manifest.sources:
            if source.pipeline in _pipelines_added:
                continue
            path = os.path.join(args.pipelines, f"{source.pipeline}.json")
            _pipelines.append(pipelines.Base.parse_file(path))
            _pipelines_added.append(source.pipeline)

    envelope = Envelope(
        manifest=_manifest,
        pipelines=_pipelines,
    )

    print(json.dumps(envelope.dict(), indent=4, sort_keys=True))


if __name__ == "__main__":
    main()
