#!/usr/bin/python3
#
# Copyright (c) 2020 Sorcero, Inc.
#
# This file is part of Sorcero's Language Intelligence platform
# (see https://www.sorcero.com).
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#

import argparse
import tempfile
import pathlib
import sys
import re

from ingestum import engine
from ingestum import manifests
from ingestum import pipelines
from ingestum.utils import stringify_document


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("pipeline")
    parser.add_argument("--workspace", type=str, default=None)
    parser.add_argument("--artifacts", type=str, default=None)

    if len(sys.argv) < 2:
        parser.parse_args()

    pipeline = pipelines.Base.parse_file(sys.argv[1])
    source_class = pipeline.pipes[0].sources[0].get_source_class()
    if source_class is None:
        raise Exception("No source was identified")

    source_fields = source_class.__fields__

    arguments_to_be_parsed = {}
    for field in source_fields:
        if field == "location":
            arguments_to_be_parsed["--path"] = (str, True)
        elif "_placeholder" in field:
            argument = re.search("^(.*?)_placeholder", field).group(1)
            arguments_to_be_parsed[f"--{argument}"] = (
                type(source_fields[field].default),
                source_fields[argument].required,
            )

    for argument in arguments_to_be_parsed:
        argument_type, is_required = arguments_to_be_parsed[argument]
        if argument_type == int:
            parser.add_argument(argument, type=int, default=-1, required=is_required)
        elif argument_type == str:
            parser.add_argument(argument, type=str, default="", required=is_required)
        elif argument_type == list:
            parser.add_argument(
                argument, type=str, nargs="+", default="", required=is_required
            )
        elif argument_type == bool:
            if source_fields[argument[2:]].default is False:
                parser.add_argument(argument, action="store_true")
            else:
                parser.add_argument(argument, action="store_false")

    args = parser.parse_args()

    if hasattr(args, "path"):
        args.location = manifests.sources.locations.Local(path=args.path)

    if args.artifacts is not None:
        destination = manifests.sources.destinations.Local(directory=args.artifacts)
    else:
        destination = manifests.sources.destinations.Void()

    workspace = args.workspace
    del args.pipeline

    tmp_workspace = None
    if workspace is not None:
        pathlib.Path(workspace).mkdir(parents=True, exist_ok=True)
    else:
        tmp_workspace = tempfile.TemporaryDirectory()
        workspace = tmp_workspace.name

    source = source_class(
        id="id",
        pipeline=pipeline.name,
        destination=destination,
        **vars(args),
    )

    results, *_ = engine.run(
        manifest=manifests.Base(sources=[source]),
        pipelines=[pipeline],
        pipelines_dir=None,
        artifacts_dir=None,
        workspace_dir=workspace,
    )

    if tmp_workspace is not None:
        tmp_workspace.cleanup()

    print(stringify_document(results[0]))


if __name__ == "__main__":
    main()
